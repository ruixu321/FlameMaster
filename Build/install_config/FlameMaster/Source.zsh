#!/bin/zsh

# THIS FILE IS AUTOMATICALLY GENERATED DURING INSTALLATION
# RERUNNING THE INSTALLATION WILL OVERWRITE CHANGES
# CHANGES SHOULD BE ADDED IN THE RESPECTIVE TEMPLATE 
# IN Repository/config/

###################################################################
########################    DESCRIPTION    ########################
###################################################################

# This script can be used to set environment variables that
# make it more convenient to run and use the FlameMaster package.
# You might want to add something like the following line to your

# ~/.zshrc or your ~/.zsh_profile (or whatever you use):
# source '/Users/ruixu/Documents/Flamelet/flamemaster/FlameMaster/Repository/../Bin/bin/Source.bash'

# Alias commands and environment variables are only set if the
# the respective files exist. Otherwise, you will see a warning
# and only a subset of the variables is set.

# This script is configured automatically during the installation, 
# but you can insert your own configuration in the section below if
# you want to. Beware that this file gets overwritten during
# installation. It's recommended to change the name if you use
# a manual configuration

# You can use the alias command 'fmagain' to run this script again
# in a verbose mode. This will give you a complete list of commands/ 
# variables set.

# List of environment variables:
#	- FM_PATH		(root path of the package)
#	- FM_BIN		(path to the executables)
#	- FM_LIB		(path to the libraries (for developers))
#	- FM_RUN		(path to the directory containing examples
#					 and possibly your calculations)
#	- FM_RUN_FM		(path to the directory containing FlameMan
#					 calculations)
#	- FM_RUN_SM		(path to the directory containing ScanMan
#					 examples)
#	- FM_DATA		(directory path that contains preprocessed 
#					 thermodynamic and transport data (*.bin files)
#					 or mechanisms (*.pre files))
#	- myData		(again, directory path that contains preprocessed 
#					 data; deprecated variable name is still included
#					 for compatibility)


###################################################################
########################   CONFIGURATION   ########################
###################################################################

# Variable pattern:
# DA_PATHNAME - absolut directory path
# FA_PATHNAME - absolut file path
# FR_TO_PATHNAME - file path relative to TO
# DR_TO_PATHNAME - directory path relative to TO

#########################
# Default configuration #
#########################
# Using the while loop below is more general approach to determine 
# the current installation location. If you use the hard coded location 
# below you won't be able to move your installation around

# DA_ROOT="/Users/ruixu/Documents/Flamelet/flamemaster/FlameMaster/Repository/.." # package installation root directory
# DA_ROOT=`dirname "$0"`
DA_ROOT=''
SOURCE=${(%):-%N}
while [ -h "$SOURCE" ]; do #resolve $SOURCE until the first file is no longer a symlink
	DA_ROOT="$( builtin cd -P "$( dirname "${SOURCE}" )" && pwd)"
	SOURCE="$(readlink "$SOURCE")" [[$SOURCE != /*]] && SOURCE="$DA_ROOT/$SOURCE" #if $SOURCE was a 
		# relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DA_ROOT="$( builtin cd -P "$( dirname "${SOURCE}" )" && pwd)"
DR_SRC_SCRIPT_LOCATION="../.."
DA_ROOT="$DA_ROOT/$DR_SRC_SCRIPT_LOCATION"
BASENAME="$( basename "${SOURCE}" )"
DR_ROOT_BIN="Bin/bin" # relative to ROOT
DR_ROOT_LIB="Bin/lib" 
DA_ROOT_DATA="/Users/ruixu/Documents/Flamelet/flamemaster/FlameMaster/Build/../Data"

# Directories for running ScanMan and FlameMan
DR_ROOT_RUN="Run"

########################
# Manual configuration #
########################
# DA_ROOT=/Users/rlanger/FlameMasterITV # package root directory
# DR_ROOT_BIN='Bin/bin' # relative to ROOT
# DR_ROOT_LIB='Bin/lib'
# DA_ROOT_DATA=$DA_ROOT/Data

# # Directories for running ScanMan and FlameMan
# DR_ROOT_RUN='Run'

###########################
# Remaining configuration #
###########################
DR_RUN_FM='FlameMan' # Directory for FlameMan calculations relative to run
DR_RUN_SM='ScanMan' # Directory for ScanMan data relative to run

# Executables in the binary directory
FR_BIN_FM='FlameMan' # FlameMan executable relative to binary directory
FR_BIN_SM='ScanMan' # ScanMan executable relative to binary directory
FR_BIN_CF='CreateBinFile'
FR_BIN_LT='ListTool'

###################################################################
########################      PROGRAM      ########################
###################################################################

# In general, you won't have to change anything below.

# Simple implementation of options/flags
usage() { echo "Usage: source $0 [-v (verbose mode)]" 1>&2; OPTIND=1; exit 1; }

OPT_V=0;
while getopts ":vh" opt; do
  case $opt in
    v)
		#echo "Running in verbose mode" >&2
		OPT_V=1
    	;;

    h)
    	usage
        ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit
      ;;
  esac
done
# reset getopts
OPTIND=1

LookForFile() {
	if [[ -f "$1" ]]
	then
    	#echo "Found file: $1"
    	return 0
	else
		#echo "Warning: Cannot find file: $1"
		return 1
	fi
}

LookForDir() {
	if [[ -d "$1" ]]
	then
    	#echo "Found directory: $1"
    	return 0
	else
		#echo "Warning: Cannot find directory: $1"
		return 1
	fi
}

AliasIfFileExists() {
	CMD_NAME="$1"
	FILE="$2"
	OPTS="$3"
	LookForFile "$FILE"
	retval=$?
	if [[ "$retval" == 0 ]]
	then
		if [[ ! -x "$FILE" ]]
		then
	    	echo chmod +x "$FILE"
		fi
	     CreateAliasVerbose $CMD_NAME "$FILE" "$OPTS"
	else
		unalias $CMD_NAME 2>/dev/null
	    echo "Cannot create alias '$CMD_NAME' ($FILE doesn't exist)"
	fi 
}

ExportIfDirExists() {
	VAR_NAME="$1"
	DIR="$2"
	LookForDir "$DIR"
	retval=$?
	if [[ "$retval" == 0 ]]
	then
	     ExportVerbose $VAR_NAME "$DIR"
	else
		unset $VAR_NAME
	    echo "Cannot export $VAR_NAME ($DIR doesn't exist)"
	fi 
}

CreateAliasVerbose(){	
	if [[ "$OPT_V" == 1 ]]
	then
		echo "alias $1=$2 $3"
	fi
	alias $1="'$2' $3"
}

ExportVerbose(){
	if [[ "$OPT_V" == 1 ]]
	then
		echo "export $1=$2"
	fi
	export $1="$2"
}

if [[ "$OPT_V" == 1 ]]
then
	echo "#########################################################################"
	echo "Setting up environment for FlameMaster, version 4.0.0"
	echo "#########################################################################"
fi

RUN_AGAIN=fmagain
if [[ "$OPT_V" == 1 ]]
then
	echo ""
	echo "'${RUN_AGAIN}' can be used to run this script again in verbose mode"
fi

# Rerun in verbose mode
if [[ $SOURCE == /* ]]; then 
	alias $RUN_AGAIN="source '$SOURCE' -v";
else 
	alias $RUN_AGAIN="source '$DA_ROOT/$DR_ROOT_BIN/$BASENAME' -v"; 
fi

if [[ "$OPT_V" == 1 ]]
then
	echo ""
	echo "Setting up locations..."
fi

# check root directory
ExportIfDirExists FM_PATH 		"$DA_ROOT"

# check data directory
ExportIfDirExists FM_DATA 		"$DA_ROOT_DATA"
ExportIfDirExists myData 		"$DA_ROOT_DATA"

# check run directories
ExportIfDirExists FM_RUN 		"$DA_ROOT/$DR_ROOT_RUN"
ExportIfDirExists FM_RUN_FM 	"$DA_ROOT/$DR_ROOT_RUN/$DR_RUN_FM"
ExportIfDirExists FM_RUN_SM 	"$DA_ROOT/$DR_ROOT_RUN/$DR_RUN_SM"

# check binary directory
ExportIfDirExists FM_BIN		"$DA_ROOT/$DR_ROOT_BIN"
ExportIfDirExists FM_LIB		"$DA_ROOT/$DR_ROOT_LIB"

if [[ "$OPT_V" == 1 ]]
then
	echo ""
	echo "Creating alias commands..."
fi
AliasIfFileExists FlameMan 			"$DA_ROOT/$DR_ROOT_BIN/$FR_BIN_FM"
AliasIfFileExists FlameMaster 		"$DA_ROOT/$DR_ROOT_BIN/$FR_BIN_FM"
AliasIfFileExists ScanMan 			"$DA_ROOT/$DR_ROOT_BIN/$FR_BIN_SM"
AliasIfFileExists CreateBinFile 	"$DA_ROOT/$DR_ROOT_BIN/$FR_BIN_CF"
LT_OPTS='-M'
AliasIfFileExists ListTool 			"$DA_ROOT/$DR_ROOT_BIN/$FR_BIN_LT" 	"$LT_OPTS"
AliasIfFileExists LT 				"$DA_ROOT/$DR_ROOT_BIN/$FR_BIN_LT" 	"$LT_OPTS"

unset DA_ROOT
unset DA_ROOT_DATA
unset DR_ROOT_RUN
unset DR_RUN_FM
unset DR_RUN_SM
unset DR_ROOT_BIN
unset DR_ROOT_LIB
unset FR_BIN_FM
unset FR_BIN_SM
unset FR_BIN_CF
unset FR_BIN_LT
unset SOURCE
unset CMD_NAME
unset FILE
unset OPTS
unset OPT_V
unset VAR_NAME
unset DIR
unset -f LookForFile
unset -f LookForDir
unset -f AliasIfFileExists
unset -f ExportIfDirExists
unset -f CreateAliasVerbose
unset -f ExportVerbose

if [[ "$OPT_V" == 1 ]]
then
	echo ""
	echo "done"
fi
